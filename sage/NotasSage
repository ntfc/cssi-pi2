- F_2 e o mesmo que um GaloisField(2^1)
 -> em sage: F = GF(2)
- F_2[x]
 -> em sage: F = PolynomialRing(GF(2), 'x')
- R = F_2[x]/f(x)
 -> em sage: F = PolynomialRing(GF(2), 'x'); x = F.gen();
             R = F.quotient(f(x), 'a'); a = R.gen(); // este 'a' aparece para que??
- Usar f.list() para converter um poly numa lista binaria
- Hamming de uma lista e simplesmente: l.count(1)

-R^* senão tou enganado é por aqui. Deixei comentado no código como acho que deve ser.
-Na verificação se o elemento pertence ao anel, acho que a condição que meti não é suficiente
-http://www.sagemath.org/doc/reference/rings_standard/sage/rings/finite_rings/integer_mod_ring.html
--
- Pagina 505 do livro de TC tem um algoritmo para calcular inversas modulares multiplicativas
- Tambem diz que se gcd(a,N) = 1, entao a pertence a R^* (a e um elemento de R)
- Ja fizemos isto para o PI1, para o Paillier
--
-CRT no sage: http://www.sagemath.org/doc/reference/misc/sage/rings/arith.html
--
-converter inteiro c para lista de inteiros: [int(bit) for bit in c.binary()]
--
Dado um polynomio f, f.padded_list()
 - f.coeffs() retorna lista de coeficientes
 - f.hamming_weight() retorna wt(f)
 - f.truncate() pode dar jeito
